option(PROJ_ASAN "Build with address sanitizer")
set(PROJ_ASAN_BLACK_LIST "" CACHE FILEPATH "black list file that must be provided to asan")
option(PROJ_TSAN "Build with thread sanitizer")
option(PROJ_UBSAN "Build with undefined behaviour sanitizer")
option(PROJ_MSAN "Build with memory sanitizer")
option(PROJ_COVERAGE "Build with code coverage")

MACRO(debug_compile_options target)
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")

        message("--building in debug mode")
        TARGET_COMPILE_OPTIONS(${target} PRIVATE -W -Wall -g)

		if (NOT PROJ_ASAN_BLACK_LIST MATCHES "")
			message("using asan black list")
			TARGET_COMPILE_OPTIONS(${target} PRIVATE -fsanitize-blacklist=PROJ_ASAN_BLACK_LIST)
		endif()
        if (PROJ_ASAN)
            message("--compiling with asan")
            if (CLANG)
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")
            elseif(GNU)
                TARGET_COMPILE_OPTIONS(${target} PRIVATE -O1 -fsanitize=address -fno-omit-frame-pointer)
                TARGET_LINK_LIBRARIES(${target} PRIVATE asan)
            endif()
        endif()

        if (PROJ_TSAN)
            message("--compiling with tsan")
            if (CLANG)
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=thread")
            elseif(GNU)
                TARGET_COMPILE_OPTIONS(${target} PRIVATE -O1 -fsanitize=thread -fno-omit-frame-pointer)
                TARGET_LINK_LIBRARIES(${target} PRIVATE tsan)
            endif()
        endif()

        if (PROJ_UBSAN)
            message("--compiling with ubsan")
            if (CLANG)
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=undefined")
            elseif(GNU)
                TARGET_COMPILE_OPTIONS(${target} PRIVATE -O1 -fsanitize=undefined -fno-omit-frame-pointer)
                TARGET_LINK_LIBRARIES(${target} PRIVATE ubsan)
            endif()
        endif()

        if (PROJ_MSAN)
            message("--compiling with memory sanitizer")
            if (CLANG)
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=memory")
            elseif(GNU)
                message("--compiling with msan")
                TARGET_COMPILE_OPTIONS(${target} PRIVATE -O1 -fsanitize=memory
                    -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-memory-track-origins=2)
                TARGET_LINK_LIBRARIES(${target} PRIVATE debug msan)
            endif()
        endif()

        if (PROJ_COVERAGE)
            message("--compiling with coverage")
            set(CMAKE_CXX_OUTPUT_EXTENSION_REPLACE 1)
            TARGET_COMPILE_OPTIONS(${target} PRIVATE -O0 -fno-inline -fno-elide-constructors)
            if (clang)
                TARGET_COMPILE_OPTIONS(${target} PRIVATE --coverage)
            elseif(GNU)
                TARGET_COMPILE_OPTIONS(${target} PRIVATE --coverage -fno-inline-small-functions -fno-default-inline)
                TARGET_LINK_LIBRARIES(${target} PRIVATE gcov)
            endif()
        endif()

    endif()

ENDMACRO()
